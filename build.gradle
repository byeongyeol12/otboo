plugins {
    id 'java'
    id 'org.springframework.boot' version '3.3.1'
    id 'io.spring.dependency-management' version '1.1.5'
    id 'jacoco'
}

group = 'com.codeit'
version = '0.0.1-SNAPSHOT'

def querydslDir = "$buildDir/generated/querydsl"

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    // Spring Boot Starters
    implementation 'org.springframework.boot:spring-boot-starter-batch'
    implementation 'org.springframework.boot:spring-boot-starter-data-elasticsearch'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'
    implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-websocket'
    implementation 'org.springframework.boot:spring-boot-starter-webflux'

    // Lombok
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'

    // Database
    runtimeOnly 'org.postgresql:postgresql'
    implementation 'io.hypersistence:hypersistence-utils-hibernate-63:3.7.0'

    // QueryDSL
    implementation 'com.querydsl:querydsl-jpa:5.1.0:jakarta'
    annotationProcessor "com.querydsl:querydsl-apt:5.1.0:jakarta"
    annotationProcessor "jakarta.annotation:jakarta.annotation-api"
    annotationProcessor "jakarta.persistence:jakarta.persistence-api"

    // MapStruct
    implementation 'org.mapstruct:mapstruct:1.5.3.Final'
    annotationProcessor 'org.mapstruct:mapstruct-processor:1.5.3.Final'
    annotationProcessor 'org.projectlombok:lombok-mapstruct-binding:0.2.0'

    // JWT
    implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
    runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.5'
    runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.11.5'

    // Others
    implementation 'io.github.cdimascio:dotenv-java:3.0.0'
    implementation 'org.springframework.kafka:spring-kafka'
    implementation 'com.fasterxml.jackson.dataformat:jackson-dataformat-xml'
    implementation 'org.springframework.security:spring-security-messaging'
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.5.0'

    // AWS
    implementation platform("io.awspring.cloud:spring-cloud-aws-dependencies:3.3.0")
    implementation 'io.awspring.cloud:spring-cloud-aws-s3'
    //  implementation 'io.awspring.cloud:spring-cloud-aws-starter-secrets-manager'
    //  implementation 'io.awspring.cloud:spring-cloud-aws-starter-parameter-store'

    // Test Dependencies
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.batch:spring-batch-test'
    testImplementation 'org.springframework.kafka:spring-kafka-test'
    testImplementation 'org.springframework.security:spring-security-test'
    testImplementation 'org.springframework.boot:spring-boot-testcontainers'

    def testcontainersVersion = "1.19.8"
    testImplementation "org.testcontainers:postgresql:${testcontainersVersion}"
    testImplementation "org.testcontainers:junit-jupiter:${testcontainersVersion}"

    // ✨ WebClient 테스트를 위한 MockWebServer 의존성 추가
    testImplementation 'com.squareup.okhttp3:mockwebserver:4.12.0'
    testImplementation 'org.mockito:mockito-inline:5.2.0'
}

// QueryDSL generated sources
tasks.withType(JavaCompile).configureEach {
    options.generatedSourceOutputDirectory.set(file(querydslDir))
}
sourceSets {
    main.java.srcDirs += [querydslDir]
}

// clean 시 QueryDSL 소스 삭제
clean {
    delete file(querydslDir)
}

// Jacoco 설정
jacoco {
    toolVersion = "0.8.12"
}

tasks.named('test') {
    useJUnitPlatform()
    finalizedBy 'jacocoTestReport'
}

tasks.named('jacocoTestReport') {
    dependsOn tasks.named('test')
    reports {
        html.required = true
        xml.required = false
        csv.required = false
    }

    def jacocoExcludes = [
            '**/*Application.*',
            '**/global/config/**',
            '**/dto/**',
            '**/Q*'
    ]

    classDirectories.setFrom(files(classDirectories.files.collect {
        fileTree(dir: it, exclude: jacocoExcludes)
    }))
}
